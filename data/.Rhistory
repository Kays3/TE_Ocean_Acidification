# August 12, 2023 started
# August 13 - identifying which contrast we need
# October 18 - sharing results with TW
# Author KD
library(DESeq2)
library(tools)
library(limma)
library(qvalue)
library(dplyr)
library(tidyverse)
install.packages(DESeq2, limma, qvalue, dplyr, tidyverse)
install.packages(DESeq2)
install.packages("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
install.packages("BiocManager")
install.packages("dplyr", method = "libcurl")
install.packages("dplyr", type="source")
r
version
7/570
(7/570)*(1/25)
1000000+ 51000
7/(0.014*0.0004912*570)
7/(0.014*0.0004912*570)/25
#Chance sharing correction
if (chance.sharing.correction == TRUE){
e = 0.01
p = (median.allele.frequency)^2 + (1-median.allele.frequency)^2
phi = (length.of.chromosome/100)/markers.on.chromosome
loci = log(e)/log(p)
cs.correction = loci*phi
}
if (chance.sharing.correction == FALSE){cs.correction = 0}
#Age estimation and confidence intervals
cc = confidence.coefficient
getwd()
#gdrive beholder
setwd("../data/")
library(ggplot2)
library(reshape2)  # For melting your data frame if it's not already in long format
# Load the libraries
library(dplyr)
library(tidyr)
library(readr)
library(pheatmap)
data <- read.csv("reference_files/TE_DEG_heatmap.csv")
data1<-as.data.frame(cbind(data$function_protein,data$Contrast))
element_counts2 <- data %>% count(function_protein,Contrast) %>% spread(key = function_protein, value = n, fill = 0)
# Spread to wide format suitable for a heatmap
print(element_counts2)
# Ensure the data is in matrix format for pheatmap
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Create the heatmap
pheatmap(count_matrix,
color = colorRampPalette(c("white", "blue"))(50),  # Use a sequential color palette
scale = "row",  # Normalize across rows
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = "Heatmap of Transposable Elements Counts")
#gdrive beholder
setwd("../data/")
getwd()
#gdrive beholder
setwd("TE_Ocean_Acidification/data/")
library(ggplot2)
library(reshape2)  # For melting your data frame if it's not already in long format
# Load the libraries
library(dplyr)
library(tidyr)
library(readr)
library(pheatmap)
data <- read.csv("reference_files/TE_DEG_heatmap.csv")
data1<-as.data.frame(cbind(data$function_protein,data$Contrast))
element_counts2 <- data %>% count(function_protein,Contrast) %>% spread(key = function_protein, value = n, fill = 0)
# Spread to wide format suitable for a heatmap
print(element_counts2)
# Ensure the data is in matrix format for pheatmap
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Create the heatmap
pheatmap(count_matrix,
color = colorRampPalette(c("white", "blue"))(50),  # Use a sequential color palette
scale = "row",  # Normalize across rows
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = "Heatmap of Transposable Elements Counts")
data<-as.data.frame(count_matrix)
View(data)
View(count_matrix)
View(data)
library(DESeq2)
library(pheatmap)
library(ComplexHeatmap)
library(circlize)
library(ggplot2)
library(ggtext)  # for rich text formatting
library(viridis)
library(dplyr)
library(tidyverse)
options(width=100)
#rm(list=ls())
getwd()
setwd("data/")
# Reload the DESeqDataSet object from the RDS file
dds <- readRDS("reference_files/dds_object_72transcripts_new.rds")
setwd("../data/")
# Reload the DESeqDataSet object from the RDS file
dds <- readRDS("reference_files/dds_object_72transcripts_new.rds")
# Reload the DESeqDataSet object from the RDS file
#dds <- readRDS("reference_files/dds_object_72transcripts_new.rds")
te_deg_all<-read.csv("reference_files/TE_DEG_heatmap.csv")
te_deg_all2<- te_deg_all %>% distinct(Apoly_gene, function_protein, .keep_all = TRUE)
te_deg_all3<- te_deg_all2 %>%
mutate(id = make.unique(as.character(function_protein)))
# Create the heatmap
pheatmap(count_matrix,
color = nature_colors,  # Use the nature-inspired color palette
scale = "row",  # Normalize across rows
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,  # Show numbers on the heatmap
number_color = "black",  # Color of the numbers
fontsize_number = 10,    # Font size for the numbers
main = "Heatmap of Transposable Elements Counts")
# Load necessary libraries
library(pheatmap)
library(RColorBrewer)
# Create a custom color palette inspired by nature (e.g., greens and browns)
nature_colors <- colorRampPalette(brewer.pal(9, "YlGnBu"))(50)
# Create the heatmap
pheatmap(count_matrix,
color = nature_colors,  # Use the nature-inspired color palette
scale = "row",  # Normalize across rows
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,  # Show numbers on the heatmap
number_color = "black",  # Color of the numbers
fontsize_number = 10,    # Font size for the numbers
main = "Heatmap of Transposable Elements Counts")
# Ensure the data is in matrix format for pheatmap
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Create the heatmap
pheatmap(count_matrix,
color = colorRampPalette(c("white", "blue"))(50),  # Use a sequential color palette
scale = "row",  # Normalize across rows
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
main = "Heatmap of Transposable Elements Counts")
# Load necessary libraries
library(pheatmap)
library(RColorBrewer)
# Create a custom color palette inspired by nature (e.g., greens and browns)
nature_colors <- colorRampPalette(brewer.pal(9, "YlGnBu"))(50)
# Create the heatmap
pheatmap(count_matrix,
color = nature_colors,  # Use the nature-inspired color palette
scale = "row",  # Normalize across rows
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,  # Show numbers on the heatmap
number_color = "black",  # Color of the numbers
fontsize_number = 10,    # Font size for the numbers
main = "Heatmap of Transposable Elements Counts")
View(count_matrix)
# Create a custom color palette inspired by nature (e.g., greens and browns)
nature_colors <- colorRampPalette(brewer.pal(9, "YlGnBu"))(50)
# Round the counts in the matrix to ensure they are complete numbers
rounded_count_matrix <- round(count_matrix)
# Create row and column annotations based on element names
row_annotation <- data.frame(
Category = ifelse(grepl("tol", rownames(count_matrix)), "Tolerance",
ifelse(grepl("sens", rownames(count_matrix)), "Sensitivity", "Other"))
)
rownames(row_annotation) <- rownames(count_matrix)
# Create the heatmap with annotations
pheatmap(rounded_count_matrix,
color = nature_colors,  # Use the nature-inspired color palette
scale = "row",  # Normalize across rows
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
clustering_method = "complete",
show_rownames = TRUE,
show_colnames = TRUE,
display_numbers = TRUE,  # Show numbers on the heatmap
number_color = "black",  # Color of the numbers
fontsize_number = 10,    # Font size for the numbers
main = "Heatmap of Transposable Elements Counts",
annotation_row = row_annotation)  # Add row annotation
# Assuming `count_matrix` is your dataset
# Convert the data frame to long format for ggplot2
log10_counts_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "expression")
View(element_counts2)
View(log10_counts_long)
# Assuming `count_matrix` is your dataset
# Convert the data frame to long format for ggplot2
log10_counts_long <- as.data.frame(count_matrix) %>%
rownames_to_column("contrast") %>%
pivot_longer(-TE_family, names_to = "TE_family", values_to = "count")
# Assuming `count_matrix` is your dataset
# Convert the data frame to long format for ggplot2
log10_counts_long <- as.data.frame(count_matrix) %>%
rownames_to_column("contrast") %>%
pivot_longer(-TE_family, names_to = "TE_family", values_to = "count")
# Assuming `count_matrix` is your dataset
# Convert the data frame to long format for ggplot2
log10_counts_long <- as.data.frame(count_matrix) %>%
rownames_to_column("contrast") %>%
pivot_longer(-contrast, names_to = "TE_family", values_to = "count")
View(log10_counts_long)
# Aggregate data by condition and TE_family (if you have condition information)
# For this example, we will assume `combinedCondition` is already in your `count_matrix` or inferred
log10_counts_grouped <- log10_counts_long %>%
group_by(contrast, TE_family) %>%
summarize(mean_count = mean(count, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = sample_name, values_from = mean_count) %>%
column_to_rownames("contrast")
# Aggregate data by condition and TE_family (if you have condition information)
# For this example, we will assume `combinedCondition` is already in your `count_matrix` or inferred
log10_counts_grouped <- log10_counts_long %>%
group_by(contrast, TE_family) %>%
summarize(mean_count = mean(count, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = TE_family, values_from = mean_count) %>%
column_to_rownames("contrast")
View(log10_counts_grouped)
# Perform hierarchical clustering
row_clust <- hclust(dist(log10_counts_grouped))
col_clust <- hclust(dist(t(log10_counts_grouped)))
# Convert to long format for ggplot2
log10_counts_long <- as.data.frame(log10_counts_grouped) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "condition", values_to = "mean_count")
View(log10_counts_long)
# Convert to long format for ggplot2
log10_counts_long <- as.data.frame(log10_counts_grouped) %>%
rownames_to_column("contrast") %>%
pivot_longer(-contrast, names_to = "contrast", values_to = "mean_count")
# Convert to long format for ggplot2
log10_counts_long <- as.data.frame(log10_counts_grouped) %>%
rownames_to_column("contrast") %>%
pivot_longer(-contrast, names_to = "TE_family", values_to = "mean_count")
View(log10_counts_long)
# Extract ordered names based on clustering
ordered_TE_families <- rownames(log10_counts_grouped)[row_clust$order]
ordered_conditions <- colnames(log10_counts_grouped)[col_clust$order]
# Factor the names based on the clustering
log10_counts_long$TE_family <- factor(log10_counts_long$TE_family, levels = ordered_TE_families)
log10_counts_long$condition <- factor(log10_counts_long$condition, levels = ordered_conditions)
# Factor the names based on the clustering
log10_counts_long$TE_family <- factor(log10_counts_long$TE_family, levels = ordered_TE_families)
log10_counts_long$contrast <- factor(log10_counts_long$contrast, levels = ordered_conditions)
# Highlight elements containing "tol" or "sens"
log10_counts_long$highlight <- ifelse(grepl("tol", log10_counts_long$TE_family) | grepl("sens", log10_counts_long$TE_family), "highlight", "normal")
# Create the heatmap with ggplot2
gg_log10_heatmap <- ggplot(log10_counts_long, aes(x = contrast, y = TE_family, fill = mean_expression)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "navy", mid = "grey", high = "firebrick", midpoint = median(log10_counts_long$mean_expression, na.rm = TRUE)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) +
labs(title = "Differential Expression of TE-related transcripts", x = "Condition", y = "TE Family", fill = "Expression") +
geom_tile(aes(color = highlight), size = 0.5) +
scale_color_manual(values = c("highlight" = "red", "normal" = "black")) +
guides(color = FALSE)
# Display the plot
print(gg_log10_heatmap)
# Create the heatmap with ggplot2
gg_log10_heatmap <- ggplot(log10_counts_long, aes(x = contrast, y = TE_family, fill = mean_count)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "navy", mid = "grey", high = "firebrick", midpoint = median(log10_counts_long$mean_count, na.rm = TRUE)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) +
labs(title = "Differential Expression of TE-related transcripts", x = "Condition", y = "TE Family", fill = "Expression") +
geom_tile(aes(color = highlight), size = 0.5) +
scale_color_manual(values = c("highlight" = "red", "normal" = "black")) +
guides(color = FALSE)
# Display the plot
print(gg_log10_heatmap)
# Assuming 'count_matrix' is your matrix
# Convert the matrix to a long format data frame
data_long <- melt(as.matrix(count_matrix))
# Rename columns appropriately
colnames(data_long) <- c("Condition", "TransposableElement", "Count")
# Define the color scale
color_scale <- scale_fill_gradientn(colors = rev(colorRampPalette(c("white", "blue"))(50)))
# Create the heatmap
heatmap_plot <- ggplot(data_long, aes(x = Condition , y = TransposableElement , fill = Count)) +
geom_tile() +  # Use tiles for the heatmap
color_scale +  # Apply the color scale
labs(
title = "Heatmap of Transposable Elements Counts",
x = "Transposable Element",
y = "Condition",
fill = "Count"
) +
theme_minimal() +  # Nature-style theme
theme(
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_fixed()  # Keep aspect ratio to 1 to make tiles square
# Print the plot
print(heatmap_plot)
# Define a suitable color scale
color_scale <- scale_fill_gradientn(colors = rev(colorRampPalette(c("black", "white"))(100)),
name = "Count",
limits = c(min(data_long$Count), max(data_long$Count)),
breaks = pretty(data_long$Count, n = 5))
# Create the heatmap using ggplot2
heatmap_plot <- ggplot(data_long, aes(x = Condition, y = TransposableElement, fill = Count)) +
geom_tile(color = "white", linewidth = 0.1) +  # Add white borders for clarity
color_scale +
labs(title = "Heatmap of Differentially Expressed Transposable Elements \n Across Pairwise Comparisons",
x = "Pairwise Comparisons",
y = "Transposable Element") +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
) +
coord_fixed(ratio = 1 / 3)  # Adjust the aspect ratio
# Print the plot
print(heatmap_plot)
rm(list=ls())
