library(ComplexHeatmap)
library(circlize)
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "expression")
library(tibble)
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "expression")
# Extract ordered names based on clustering
ordered_TE_families <- rownames(count_matrix)[row_clust$order]
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family, fill = expression)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "navy", mid = "grey", high = "firebrick", midpoint = median(count_matrix_long$expression, na.rm = TRUE)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Expression")
# Display the plot
print(gg_heatmap)
#need to try this
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "expression")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family, fill = expression)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "navy", mid = "grey", high = "firebrick",
midpoint = median(count_matrix_long$expression, na.rm = TRUE),
breaks = scales::breaks_pretty(n = 5),
labels = scales::number_format(accuracy = 1)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Expression")
# Display the plot
print(gg_heatmap)
#need to try this
# Ensure the data is in matrix format
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "expression")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family)) +
geom_tile(color = "white", fill = "white") +
geom_text(aes(label = round(expression, 0)), size = 3) +
scale_fill_manual(values = c("white", "grey80", "grey50")) +
scale_fill_gradient(low = "white", high = "black", breaks = c(0, 1, 2), limits = c(0, 2), guide = "legend") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Expression")
# Display the plot
print(gg_heatmap)
#need to try this
# Ensure the data is in matrix format
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "expression")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family, fill = expression)) +
geom_tile(color = "white") +
geom_text(aes(label = round(expression, 0)), size = 3) +
scale_fill_gradient2(low = "navy", mid = "grey", high = "firebrick", midpoint = median(count_matrix_long$expression, na.rm = TRUE),
breaks = c(0, 1, 2), limits = c(0, max(count_matrix_long$expression, na.rm = TRUE)), guide = "legend") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Expression")
# Display the plot
print(gg_heatmap)
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family, fill = expression)) +
geom_tile(color = "white") +
geom_text(aes(label = round(expression, 0)), size = 3) +
scale_fill_gradient2(low = "navy", mid = "grey", high = "firebrick", midpoint = median(count_matrix_long$expression, na.rm = TRUE),
breaks = c(0, 1, 2), limits = c(0, max(count_matrix_long$expression, na.rm = TRUE)), guide = "legend") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Count")
# Display the plot
print(gg_heatmap)
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "expression")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create a new column for custom colors based on "tol" or "sens"
count_matrix_long$group <- ifelse(grepl("tol", count_matrix_long$TE_family), "tol",
ifelse(grepl("sens", count_matrix_long$TE_family), "sens", "other"))
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family, fill = expression)) +
geom_tile(color = "white") +
geom_text(aes(label = round(expression, 0)), size = 3) +
scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = median(count_matrix_long$expression, na.rm = TRUE),
breaks = c(0, 1, 2), limits = c(0, max(count_matrix_long$expression, na.rm = TRUE)), guide = "legend") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
facet_grid(. ~ group, scales = "free", space = "free") +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Expression")
# Display the plot
print(gg_heatmap)
#need to try this
# Ensure the data is in matrix format
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "count")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create a new column for custom colors based on "tol" or "sens"
count_matrix_long$group <- ifelse(grepl("tol", count_matrix_long$TE_family), "tol",
ifelse(grepl("sens", count_matrix_long$TE_family), "sens", "other"))
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family, fill = count)) +
geom_tile(color = "white") +
geom_text(aes(label = round(count, 0)), size = 3) +
scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = median(count_matrix_long$count, na.rm = TRUE),
breaks = c(0, 1, 2), limits = c(0, max(count_matrix_long$count, na.rm = TRUE)), guide = "legend") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
facet_grid(. ~ group, scales = "free", space = "free") +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Count")
# Display the plot
print(gg_heatmap)
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "count")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create a new column for custom colors based on "tol" or "sens"
count_matrix_long$color_group <- ifelse(grepl("tol", count_matrix_long$TE_family), "tol",
ifelse(grepl("sens", count_matrix_long$TE_family), "sens", "other"))
# Define custom colors
custom_colors <- c("tol" = "red", "sens" = "blue", "other" = "grey")
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family, fill = count)) +
geom_tile(color = "white") +
geom_text(aes(label = round(count, 0), color = color_group), size = 3) +
scale_fill_gradient2(low = "white", mid = "yellow", high = "red", midpoint = median(count_matrix_long$count, na.rm = TRUE),
breaks = c(0, 1, 2), limits = c(0, max(count_matrix_long$count, na.rm = TRUE)), guide = "legend") +
scale_color_manual(values = custom_colors) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Count", color = "Group")
# Display the plot
print(gg_heatmap)
#need to try this
# Ensure the data is in matrix format
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "count")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create a new column for custom colors based on "tol" or "sens"
count_matrix_long$color_group <- ifelse(grepl("tol", count_matrix_long$TE_family), "tol",
ifelse(grepl("sens", count_matrix_long$TE_family), "sens", "other"))
# Define custom colors
custom_colors <- c("tol" = "red", "sens" = "blue", "other" = "grey80")
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family, fill = color_group)) +
geom_tile(color = "white") +
geom_text(aes(label = round(count, 0)), size = 3, color = "black") +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Group")
# Display the plot
print(gg_heatmap)
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "count")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create a new column for custom colors based on "tol" or "sens"
count_matrix_long$color_group <- ifelse(grepl("tol", count_matrix_long$TE_family), "tol",
ifelse(grepl("sens", count_matrix_long$TE_family), "sens", "other"))
# Define custom colors
custom_colors <- c("tol" = "red", "sens" = "blue", "other" = "grey80")
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family)) +
geom_tile(aes(fill = count), color = "white") +
geom_text(aes(label = ifelse(count == 0, "", round(count, 0))), size = 3, color = "black") +
scale_fill_gradientn(colors = c("white", "lightblue", "blue", "red"),
values = scales::rescale(c(0, 1, 2)),
breaks = c(0, 1, 2),
limits = c(0, 2),
guide = "colorbar") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Count")
# Display the plot
print(gg_heatmap)
# Ensure the data is in matrix format
count_matrix <- as.matrix(element_counts2[-1])  # Exclude any non-numeric columns if present
rownames(count_matrix) <- element_counts2[[1]]  # Set the first column as row names if it represents the element types
# Perform hierarchical clustering
row_clust <- hclust(dist(count_matrix))
col_clust <- hclust(dist(t(count_matrix)))
# Convert to long format for ggplot2
count_matrix_long <- as.data.frame(count_matrix) %>%
rownames_to_column("TE_family") %>%
pivot_longer(-TE_family, names_to = "sample_name", values_to = "count")
# Custom ordering based on presence of "tol" or "sens"
custom_order <- c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE),
setdiff(rownames(count_matrix), c(grep("tol", rownames(count_matrix), value = TRUE),
grep("sens", rownames(count_matrix), value = TRUE))))
# Extract ordered names based on clustering and custom order
ordered_TE_families <- intersect(custom_order, rownames(count_matrix)[row_clust$order])
ordered_conditions <- colnames(count_matrix)[col_clust$order]
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create a new column for custom colors based on "tol" or "sens"
count_matrix_long$color_group <- ifelse(grepl("tol", count_matrix_long$TE_family), "tol",
ifelse(grepl("sens", count_matrix_long$TE_family), "sens", "other"))
# Define custom colors
custom_colors <- c("tol" = "red", "sens" = "blue", "other" = "grey80")
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family)) +
geom_tile(aes(fill = count), color = "white") +
geom_text(aes(label = ifelse(count == 0, "", round(count, 0))), size = 3, color = "black") +
scale_fill_gradientn(colors = c("white", "lightblue", "blue", "red"),
values = scales::rescale(c(0, 1, 2)),
breaks = c(0, 1, 2),
limits = c(0, 2),
guide = "colorbar") +
facet_wrap(~ color_group, scales = "free_y", ncol = 1, strip.position = "left") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
strip.text.y = element_text(size = 12, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "Sample", y = "TE Family", fill = "Count")
# Display the plot
print(gg_heatmap)
# Factor the names based on the clustering and custom order
count_matrix_long$TE_family <- factor(count_matrix_long$TE_family, levels = ordered_TE_families)
count_matrix_long$sample_name <- factor(count_matrix_long$sample_name, levels = ordered_conditions)
# Create a new column for custom colors based on "tol" or "sens"
count_matrix_long$color_group <- ifelse(grepl("tol", count_matrix_long$TE_family), "Tolerant parents",
ifelse(grepl("sens", count_matrix_long$TE_family), "Sensitive parents", "other"))
# Define custom colors
custom_colors <- c("tol" = "red", "sens" = "blue", "other" = "grey80")
# Create the heatmap with ggplot2
gg_heatmap <- ggplot(count_matrix_long, aes(x = sample_name, y = TE_family)) +
geom_tile(aes(fill = count), color = "white") +
geom_text(aes(label = ifelse(count == 0, "", round(count, 0))), size = 3, color = "black") +
scale_fill_gradientn(colors = c("white", "lightblue", "blue", "red"),
values = scales::rescale(c(0, 1, 2)),
breaks = c(0, 1, 2),
limits = c(0, 2),
guide = "colorbar") +
facet_wrap(~ color_group, scales = "free_y", ncol = 1, strip.position = "left") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10),
strip.text.y = element_text(size = 12, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
labs(title = "Heatmap of Transposable Elements Counts", x = "TE Family", y = "Fish Comparison", fill = "Count")
# Display the plot
print(gg_heatmap)
# Save the heatmap
ggsave("expression_heatmap_clustered.png", plot = gg_heatmap, width = 12, height = 10, dpi = 300)
rm(list=ls())
